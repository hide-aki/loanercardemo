# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/ruby:2.5.1-node-browsers
        environment:
          RAILS_ENV: test
          DB_HOST: 127.0.0.1
          DB_USERNAME: 'root'
          DB_PASSWORD: ''

      - image: circleci/mysql:5.7.23
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_USER: root
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/projects

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - gem-cache-{{ arch }}-{{ .Branch }}-{{ checksum "loanercarapi/Gemfile.lock" }}
          paths:
            - ./loanercarapi/vendor/bundle
      - run:
          name: install dependencies
          command: |
            cd loanercarapi
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      - save_cache:
          paths:
            - ./loanercarapi/vendor/bundle
          key: gem-cache-{{ arch }}-{{ .Branch }}-{{ checksum "loanercarapi/Gemfile.lock" }}

      - run:
         name: 'wait for db'
         command: dockerize -wait tcp://localhost:3306 -timeout 3m

      # Database setup
      - run:
          name: migrate db
          command: |
            cd loanercarapi
            bundle exec rake db:create --trace
            bundle exec rake db:schema:load --trace
            bundle exec rake db:migrate --trace
            bundle exec rake assets:clobber
            bundle exec rake assets:precompile

      # run tests!
      - run:
          name: run tests
          command: |
            cd loanercarapi
            TEST_FILES="$(circleci tests glob "loanercarapi/spec/**/*_spec.rb" | circleci tests split --split-by=timings)"

            bundle exec rspec --format progress \
                            --format RspecJunitFormatter \
                            --out loanercarapi/tmp/test-results/rspec.xml \
                            --format progress \
                            $TEST_FILES

      # collect reports
      - store_test_results:
          path: loanercarapi/tmp/test-results
      - store_artifacts:
          path: loanercarapi/tmp/test-results
          destination: test-results

      - persist_to_workspace:
          root: .
          paths:
            - .


  deploy:
        working_directory: ~/projects
        docker:
            - image: circleci/ruby:2.5.1-node-browsers
        steps:
            # Log the current branch
            - run:
                name: Show current branch
                command: echo ${CIRCLE_BRANCH}

            - attach_workspace:
                at: .

            - run:
                name: Check files
                command: ls -l -a -R /home/circleci/projects/loanercarapi/vendor

            # Install AWS cli
            - run:
                name: Install aws cli
                command: |
                    curl "https://bootstrap.pypa.io/get-pip.py" -o "get-pip.py"
                    sudo python get-pip.py
                    sudo apt-get install python-dev
                    sudo pip install awscli
                    sudo pip install awscli --upgrade
                    aws --version
            # Set the signature version for the S3 auth
            - run:
                name: Setting Signature Version 4 for S3 Request Authentication
                command: aws configure set default.s3.signature_version s3v4

            # Deploy to the S3 bucket corresponding to the current branch
            - run:
                name: Deploy to S3
                no_output_timeout: 2h
                command: |
                    BUILD_DIR=.
                    REGION=us-east-2
                    APP_NAME=loanercar
                    DEPLOYMENT_GROUP=loanercar
                    DEPLOYMENT_CONFIG=CodeDeployDefault.AllAtOnce
                    S3_BUCKET=loanercarapi
                    TAG=`date '+%Y%m%d%H%M'`
                    S3_KEY=${APP_NAME}_$TAG.zip

                    echo "#### create CodeDeploy revision: ${S3_KEY}"


                    aws deploy push --region ${REGION} --application-name ${APP_NAME} \
                           --s3-location s3://${S3_BUCKET}/${S3_KEY} --source ${BUILD_DIR}

                    echo "#### deployment revision: ${S3_KEY}"

                    ETAG=`aws deploy list-application-revisions --region ${REGION} \
                        --application-name ${APP_NAME} --s3-bucket ${S3_BUCKET} --s3-key-prefix ${S3_KEY} \
                        --query 'revisions[0].s3Location.eTag'`

                    VERSION=`aws deploy list-application-revisions --region ${REGION} \
                        --application-name ${APP_NAME} --s3-bucket ${S3_BUCKET} --s3-key-prefix ${S3_KEY} \
                        --query 'revisions[0].s3Location.version'`

                    echo "#### ETAG: ${ETAG}"
                    echo "#### VERSION: ${VERSION}"
                    DEPLOYMENTID=`aws deploy create-deployment \
                      --region ${REGION} \
                      --application-name ${APP_NAME} \
                      --s3-location bucket=${S3_BUCKET},key=${S3_KEY},bundleType=zip,eTag=${ETAG} \
                      --deployment-group-name ${DEPLOYMENT_GROUP} \
                      --deployment-config-name ${DEPLOYMENT_CONFIG} \
                      --file-exists-behavior OVERWRITE \
                      --description "loanercar" | jq -r '.deploymentId'`

                    echo "waiting deployment ..."

                    aws deploy wait deployment-successful --region ${REGION} --deployment-id ${DEPLOYMENTID}

                    echo "complete"
workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - deploy: # deployはbuildのあとに実行
          requires:
            - build
          filters: # masterブランチの場合のみデプロイする
            branches:
              only: master
